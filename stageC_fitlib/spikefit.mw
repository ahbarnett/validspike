% Mwrap file for generating MEX interface to model-based spike fitting library
% Barnett 2/12/15


%=============================================================================
@function F = spikemod(wf, p, Nt)
% SPIKEMOD  forward model for single clip given spike labels, times, ampls (MEX)
%
% F = spikemod(wf, p, Nt)
%
% Inputs:
%  wf - waveform object:
%    W     = M*NT*K upsampled centered waveforms (NT assumed odd)
%    fac   = factor to downsample (1, or factor which upsampling was done)
%  p - parameters object:
%    l     = 1*Ns labels in 1,..,K (Ns is the number of spike events)
%    t     = 1*Ns time alignments peak, measured in output samps rel to 1st samp
%    a     = 1*Ns amplitudes (typically close to 1; if empty, all set to 1)
%  Nt    = # output time samples
%
% Outputs:
%  F     = M*Nt signal window
%
% This is same interface and function as synthesis/spikemodel.m mostly for
% testing of MEX.

if wf.fac~=floor(wf.fac), error('wf.fac must be positive integer!'); end
W = wf.W; fac = wf.fac;
[M T K] = size(W);
if mod(T,2)==0, warning('waveform T must be odd'); end
if Nt<1, error('Nt must be positive!'); end
if isempty(p) || numel(p.l)==0, Ns=0;        % how many spikes in this event?
else Ns = numel(p.l);
end
if ~isfield(p,'a') || isempty(p.a), p.a = 1+0*p.t; end       % default ampl
if numel(p.t)~=Ns || numel(p.a)~=Ns, error('t and a must be same size as l');end
l = p.l; t = p.t; a = p.a;  % since mwrap can't handle struct elements
subF = 0;   % start with F zero (subF=1 would subtract from whatever Y was)
iran = [0 0];   % for support of F index range output

# spikemod(double[] W, int M, int T, int K, int fac, int Ns, int[] l, double[] t, double[] a, int Nt, output double[M,Nt] F, int subF, inout int[2] iran);



%=============================================================================
@function [p Jbest Fb] = fitonesp(wf,Y,noi,opts)
% FITONESP  maximum likelihood fit for single spike in single clip (MEX, devel)
%
% [p Jbest Fb] = fitonesp(wf,Y,noi,opts)
%
% Inputs:
%  wf - waveforms struct containing: W = M*T*K waveforms
%                                    d = raw EC data struct (d.A not needed)
%                                    fac = upsampling ratio
%                                    freqs = 1*K firing freq estimates
%  Y - M*Nt data array to fit (M channels, Nt time points)
%  noi - noise model struct, minimally noi.eta = sqrt(variance)
%  opts :  (optional) struct controlling parameters:
%          opts.nlps (default 20 for all types) neg log prior for each spike
%                         type 1..K
%          opts.locflag (default 0): 0 - use std NLL calc, 1 - local update.
%
% Outputs:
%  p - best-fit param struct, eg p.t time, p.a ampl, p.m = identity
%  Jbest - best-fit objective func = neg log lik
%  Fb - model output at best-fit params p
%
% See also: fitonespike.m, for which this is a drop-in replacement

if nargin<4, opts=[]; end
if wf.fac~=floor(wf.fac), error('wf.fac must be positive integer!'); end
W = wf.W; fac = wf.fac; % enforcing int32 for ints in C breaks MEX interface!
[M T K] = size(W);
if mod(T,2)==0, warning('waveform T must be odd'); end
[MY Nt] = size(Y);
if MY~=M, error('Y must have same number of channels M as W'); end
eta = noi.eta;
if isfield(noi,'covar'), warning('covar noise model not avail in MEX!'); end
tpad = 1.0;         % default edge padding
if isfield(opts,'nlps'), nlps = opts.nlps, else nlps = zeros(1,K); end
if numel(nlps)==1, nlps = nlps*ones(1,K); end   % duplicate across spike types
if isfield(opts,'locflag'), locflag = opts.locflag; else locflag = 0; end
srt = sum(Y.^2,1);        % initialize squared resid per time-pt

TK = T*K; W = reshape(W,[M TK]);  % mwrap can't do 3d arrays

% gave up using C function output; reverted to void type & output via pointer.
% Seems like can't have math expressions in sizes
# fitonesp(double[] W, int M, int T, int K, int fac, output int[1] lb, output double[1] tb, output double[1] ab, int Nt, double[] Y, double eta, double tpad, output double[M,Nt] Fb, output double[1] Jbest, double[] nlps, int locflag, inout double[] srt);

p.l = lb; p.t = tb; p.a = ab;   % make output param struct


%=============================================================================
@function [p Ns Jbest info R] = multifitgreedy(wf,Y,Tc,noi,maxNs,opts)
% MULTIFITGREEDY  greedy fit times, labels in variable-duration clips (MEX/OpenMP)
%
% [p Ns Jbest info R] = multifitgreedy(wf,Y,Tc,noi,maxNs,opts)
%
% INPUTS:
%  wf :    waveform struct with fields: W   - M*T*K array of waveforms
%                                       fac - upsampling factor
%  Y :     M*Ttot signal clips concatenated on time axes, where Ttot = sum(Tc)
%          or, M*Nt*Nc 3d array (equal-Nt case) in which case Tc is ignored.
%  Tc :    lengths in time points of each clip (defines the number of clips)
%  noi :   noise model struct with field noi.eta for std error of iid Gaussian
%  maxNs : (optional, default 5) maximum number spikes to fit per clip
%  opts :  (optional) struct controlling parameters:
%          opts.tpad (default 3.0) clip edge padding in sample time units
%          opts.nlps (default 20 for all types) neg log prior for each spike
%                         type 1..K
%          opts.locflag (default 2): 0 - use std NLL calc, 1 - local update,
%                                    2 - choose fastest on per-clip basis.
%
% OUTPUTS:
%  p :     1*Nc struct array of best-fit params, containing labels l in 1..K,
%          times t (doubles), amplitudes a (doubles).
%  Ns :    1*Nc int number of spikes found for each clip
%  Jbest : 1*Nc best-fit obj func (negative log likelihood) for each clip
%  info :  struct containing diagnostic info:
%          info.Jhist : (maxNs+1)*Nc history of obj func J in s-spike
%          best fits, for s=0 to Ns(c) for this clip, in the c'th column.
%          If Ns(c)<maxNs, the entry Jhist(Ns(c)+1,c) gives not-accepted next
%          spike's best J.
%  R :     M*Ttot complete best-fit residual signal clips (as Y).
%
% See for usage: test_multifitgreedy

Nc = numel(Tc);  % number of time clips
Ttot = sum(Tc);
nrJ = maxNs+1;    % # rows in Jhist
W = wf.W; fac = wf.fac; % enforcing int32 for ints in C breaks MEX interface!
if fac~=floor(fac), error('wf.fac must be positive integer!'); end
[M T K] = size(W);
TK = T*K; W = reshape(W,[M TK]);  % mwrap can't do 3d arrays
if mod(T,2)==0, warning('waveform T should be odd'); end
if numel(size(Y))==3                 % incoming 3d array, so build Tc
  [MY Nt Nc] = size(Y);
  Y = reshape(Y,[MY, Nt*Nc]);        % make it 2d
  Tc = Nt*ones(1,Nc); Ttot = sum(Tc);
else
  [MY Nt] = size(Y);
  if Nt~=Ttot, error('Y must have same # time points as sum of Tc'); end
end
if MY~=M, error('Y must have same number of channels M as W'); end
eta = noi.eta;
if isfield(noi,'covar'), warning('covar noise model not avail in MEX!'); end
if nargin<5, maxNs=5; end
if maxNs>100, maxNs=100; warning('maxNs too big, setting to 100 (a clip is too long!)'); end
if nargin<6, opts = []; end
if isfield(opts,'tpad'), tpad = opts.tpad;
else, tpad = 3.0; end         % default edge padding
if isfield(opts,'nlps'), nlps = opts.nlps;
else nlps = 20*ones(1,K); end           % default neg log priors per spike
if numel(nlps)==1, nlps = nlps*ones(1,K); end

if isfield(opts,'locflag'), locflag = opts.locflag; else locflag = 2; end % def
if locflag<0 | locflag>2, error('locflag must be 0, 1, or 2\n'); end

% watch out: "invalid argument" problem was wantR being logical not double type!

wantR = nargout>4;
if wantR
  # multifitgreedy(double[] W, int M, int T, int K, int fac, output int[1,Nc] Ns, output int[maxNs,Nc] l, output double[maxNs,Nc] t, output double[maxNs,Nc] a, int[] Tc, int Nc, double[] Y, double eta, double tpad, int maxNs, int 1, output double[nrJ,Nc] Jhist, output double[M,Ttot] R, double[] nlps, int locflag);
else
  R = 0;   % is dummy, might be slightly faster (or save RAM) not to write out.
  # multifitgreedy(double[] W, int M, int T, int K, int fac, output int[1,Nc] Ns, output int[maxNs,Nc] l, output double[maxNs,Nc] t, output double[maxNs,Nc] a, int[] Tc, int Nc, double[] Y, double eta, double tpad, int maxNs, int 0, output double[nrJ,Nc] Jhist, inout double[] R, double[] nlps, int locflag);
end

Ns = Ns(:)';

p = [];          % build struct array of params - speed around 1.5e5 clips/sec:
for c=1:Nc, j=1:Ns(c); p(c).l = l(j,c)'; p(c).t = t(j,c)'; p(c).a = a(j,c)'; end

Jbest = Jhist((maxNs+1)*(0:Nc-1) + Ns+1);   % get Ns+1'th entry from each col
info.Jhist = Jhist;
